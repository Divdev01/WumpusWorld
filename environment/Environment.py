import random 
from enum import Enum

from environment.Action import Action
from environment.Coords import Coords
from environment.Percept import Percept
from environment.Agent import Agent


class Environment:
    def __init__(self, gridWidth, gridHeight, pitProb, allowClimbWithoutGold, agent, pitLocations, terminated, wumpusLocation, wumpusAlive, goldLocation):
        self.gridWidth = gridWidth
        self.gridHeight = gridHeight
        self.pitProb = pitProb
        self.allowClimbWithoutGold = allowClimbWithoutGold
        self.agent = agent
        self.pitLocations = pitLocations
        self.terminated = terminated
        self.wumpusLocation = wumpusLocation
        self.wumpusAlive = wumpusAlive
        self.goldLocation = goldLocation

    # check whether pit is in the location
    def isPitAt(self, coords) -> bool:
        return coords in self.pitLocations
    
    # check whether wumpus is in the location
    def isWumpusAt(self, coords) -> bool:
        return self.wumpusLocation == coords
    
    #Check whether Agent is in the location
    def isAgentAt(self,coords) -> bool:      

        return self.agent.location == coords
        
    # Check whether Glitter is in the location as the agent
    def isGlitter(self) -> bool:
        return self.goldLocation == self.agent.location

    #Check whether Gold is in the location
    def isGoldAt(self,coords) -> bool:
        return coords == self.goldLocation

    #Check whether the wumpus is in line with the agent
    def wumpusInLineOfFire(self) -> bool:
            if(self.agent.orientation == 'West'):
                LineofFire = self.agent.location.x > self.wumpusLocation.x and self.agent.location.y == self.wumpusLocation.y
            elif(self.agent.orientation == 'East'):
                LineofFire = self.agent.location.x < self.wumpusLocation.x and self.agent.location.y == self.wumpusLocation.y
            elif(self.agent.orientation == 'South'):
                LineofFire = self.agent.location.x == self.wumpusLocation.x and self.agent.location.y > self.wumpusLocation.y
            else:
                LineofFire =  self.agent.location.x == self.wumpusLocation.x and self.agent.location.y < self.wumpusLocation.y
            return LineofFire
    
    # Check whether the attempt to kill wumpus is successful
    def killAttemptSuccessful(self) -> bool:
        
        killAttemptSuccess = self.agent.hasArrow and self.wumpusAlive and self.wumpusInLineOfFire()
        return killAttemptSuccess

    # Module to generate the list of adjacent cells
    def adjacentCells(self,coords):
        above = (
                Coords(coords.x, coords.y + 1)
                if(coords.y < self.gridHeight - 1)
                else None
                )

        toRight = (
                Coords(coords.x+1, coords.y) if(coords.x <self.gridWidth - 1) 
                else None
                )

        below = Coords(coords.x, coords.y-1) if (coords.y >0) else None
        toLeft = Coords(coords.x - 1, coords.y ) if (coords.x >0) else None

        adjacent_cells = list(filter(None,[above,toRight, below, toLeft]))

        return adjacent_cells
        
       
    #Module to find if pit coordinate is present in any of the adjacent cells
    def isPitAdjacent(self, coords) -> bool:
        is_pit_adjacent = [self.isPitAt(cell) for cell in self.adjacentCells(coords)]
        return any(is_pit_adjacent)

    #Module to find if wumpus coordinate is present in any of the adjacent cells    
    def isWumpusAdjacent(self, coords) ->bool:
        is_wumpus_adjacent = [self.isWumpusAt(cell) for cell in self.adjacentCells(coords)]
        return any(is_wumpus_adjacent) 
        
    #Module to find if breeze is present in the location   
    def isBreeze(self) -> bool:
        return  self.isPitAdjacent(self.agent.location)

    #Module to find if stench is present in the location   
    def isStench(self):
        return self.isWumpusAdjacent(self.agent.location) or self.isWumpusAt(self.agent.location)

    #Module to apply action generated by naive agent from the 6 actions 
    def applyAction(self, action):
      
        if(self.terminated):
            return self.Percept(False, False, False,False, False, True, 0)
        else:
            
            if(action == Action.Forward):
                oldLocation = self.agent.location
                newLocation = self.agent.forward(self.gridWidth, self.gridHeight)
                death = (self.isWumpusAt(newLocation) and self.wumpusAlive) or (self.isPitAt(newLocation))
                
                self.agent.isAlive = not (death)
                self.agent.location = newLocation
                

                newEnv = Environment(self.gridWidth, 
                                    self.gridHeight, 
                                    self.pitProb, 
                                    self.allowClimbWithoutGold, 
                                    self.agent, 
                                    self.pitLocations, 
                                    death, 
                                    self.wumpusLocation, 
                                    self.wumpusAlive,  
                                    self.agent.location if(self.agent.hasGold)  else self.goldLocation)
                newPercept = Percept(newEnv.isStench(), 
                                    newEnv.isBreeze(), 
                                    newEnv.isGlitter(), 
                                    oldLocation == self.agent.location, 
                                    False, 
                                    not(self.agent.isAlive), 
                                    -1 if(self.agent.isAlive)  else -1001)

            elif(action == Action.TurnLeft):
                newOrientation = self.agent.turnLeft()
                self.agent.orientation = newOrientation
               
                newEnv = Environment(self.gridWidth, 
                                self.gridHeight, 
                                self.pitProb, 
                                self.allowClimbWithoutGold, 
                                self.agent, 
                                self.pitLocations, 
                                self.terminated, 
                                self.wumpusLocation, 
                                self.wumpusAlive, 
                                self.goldLocation)

                newPercept = Percept(self.isStench(), self.isBreeze(), self.isGlitter(),False, False,  False, -1)

                

            elif(action == Action.TurnRight):
                
                newOrientation = self.agent.turnRight()
                self.agent.orientation = newOrientation

                newEnv = Environment(self.gridWidth, 
                                    self.gridHeight, 
                                    self.pitProb, 
                                    self.allowClimbWithoutGold, 
                                    self.agent, 
                                    self.pitLocations, 
                                    self.terminated, 
                                    self.wumpusLocation, 
                                    self.wumpusAlive, 
                                    self.goldLocation)
             
                newPercept = Percept(self.isStench(), self.isBreeze(), self.isGlitter(),False, False,  False, -1)
                

            elif(action == Action.Grab):
                
                self.agent.hasGold = self.isGlitter()
        
                newEnv = Environment(self.gridWidth, 
                                    self.gridHeight, 
                                    self.pitProb, 
                                    self.allowClimbWithoutGold, 
                                    self.agent, 
                                    self.pitLocations, 
                                    self.terminated, 
                                    self.wumpusLocation, 
                                    self.wumpusAlive, 
                                    self.agent.location if (self.agent.hasGold)  else self.goldLocation)
                newPercept = Percept(self.isStench(), self.isBreeze(), self.isGlitter(), False, False,  False, -1)

            
            elif(action == Action.Climb):
                
                inStartLocation = self.agent.location == Coords(0, 0)
                success = self.agent.hasGold and inStartLocation
                isTerminated = success or (self.allowClimbWithoutGold and inStartLocation)
                
                newEnv = Environment(self.gridWidth, self.gridHeight, self.pitProb, self.allowClimbWithoutGold, self.agent, self.pitLocations, isTerminated, self.wumpusLocation, self.wumpusAlive, self.goldLocation)
                newPercept = Percept(False, False, self.isGlitter(), False, False, isTerminated, 999 if (success) else -1)
 


            elif(action == Action.Shoot):
               
                hadArrow = self.agent.hasArrow
                
                wumpusKilled = self.killAttemptSuccessful()
                
                self.agent.hasArrow = False
                newEnv = Environment(self.gridWidth, 
                                    self.gridHeight, 
                                    self.pitProb, 
                                    self.allowClimbWithoutGold, 
                                    self.agent, 
                                    self.pitLocations, 
                                    self.terminated, 
                                    self.wumpusLocation, 
                                    self.wumpusAlive and not(wumpusKilled), 
                                    self.goldLocation)
                
                newPercept = Percept(self.isStench(), self.isBreeze(), self.isGlitter(), False, wumpusKilled, False, -11 if (hadArrow) else -1)
                

            return newEnv, newPercept

    #Visualize the game
    def visualize(self):
        
        if (self.wumpusAlive):
            wumpusSymbol = 'W'
        else:
            wumpusSymbol = 'w'
       
       
        for y in range(self.gridHeight-1,-1,-1): 
            for x in range(self.gridWidth):
                print("|  ", end = '')
                if(self.isAgentAt(Coords(x, y))):
                    print('A', end='')
                if(self.isPitAt(Coords(x, y))):
                    print('P', end='')
                if(self.isGoldAt(Coords(x, y))):
                    print('G', end='')
                if(self.isWumpusAt(Coords(x, y))):
                    print(wumpusSymbol, end = '')
                if(not(self.isAgentAt(Coords(x, y)) 
                        or self.isPitAt(Coords(x, y)) 
                        or self.isGoldAt(Coords(x, y))
                        or self.isWumpusAt(Coords(x, y)) ) ):
                    print(' ', end='')
            print("|\n")
         
        

   

                
               